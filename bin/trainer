#!/bin/env ruby

ROOT = File.dirname(File.dirname(__FILE__))
$: << File.join(ROOT, 'lib') << File.join(ROOT, 'examples')

require 'coo-coo'

def load_script_opts(path)
  CooCoo::GenerationScript.
    new(path, $stdout).
    opts
end

require 'pry'
$pry = {
  binding: binding,
  main_thread: Thread.current
}

Signal.trap("USR1") do
  $pry[:thread] ||= Thread.new do
    $pry[:binding].pry
  end
end

require 'ostruct'
options = OpenStruct.new
options.epochs = 1000
options.dataset = nil
options.model_path = nil
options.prototype = nil
options.trainer = nil
options.num_tests = 20
options.start_tests_at = 0

opts = CooCoo::OptionParser.new do |o|
  o.on('-d', '--dataset PATH') do |path|
    options.dataset = path
  end
  
  o.on('-m', '--model PATH') do |path|
    options.model_path = Pathname.new(path)
    options.binary_blob = options.binary_blob || File.extname(options.model_path) == '.bin'
  end

  o.on('--prototype PATH') do |path|
    options.prototype = path
  end

  o.on('--binary') do
    options.binary_blob = true
  end

  o.on('-e', '--train NUMBER') do |n|
    options.epochs = n.to_i
  end

  o.on('-p', '--predict NUMBER') do |n|
    options.num_tests = n.to_i
  end

  o.on('-s', '--skip NUMBER') do |n|
    options.start_tests_at = n.to_i
  end

  o.on('-t', '--trainer NAME') do |name|
    options.trainer = name
  end

  o.on('-h', '--help') do
    puts(opts)
    if options.dataset
      opts = load_script_opts(options.dataset.to_s)
      puts(opts)
    end
    if options.prototype
      opts = load_script_opts(options.prototype.to_s)
      puts(opts)
    end
    if options.trainer
      t = CooCoo::Trainer.from_name(options.trainer)
      raise ArgumentError.new("Unknown trainer #{options.trainer}") unless t
      opts, _ = t.options
      puts(opts)
    end
    exit
  end
end

argv = opts.parse!(ARGV)

puts("Loading training set #{options.dataset}")

training_set_gen = CooCoo::GenerationScript.new(options.dataset.to_s, $stdout)
argv, training_set = training_set_gen.call(argv)

if options.model_path && File.exists?(options.model_path.to_s)
  puts("Loading network #{options.model_path}")
  if options.binary_blob
    net = Marshal.load(File.read(options.model_path))
  else
    net = CooCoo::Network.load(options.model_path)
  end
else
  puts("Generating network from #{options.prototype}")
  net_gen = CooCoo::GenerationScript.new(options.prototype.to_s, $stdout)
  argv, net = net_gen.call(argv, training_set)
end

trainer = nil
trainer_options = nil

if options.trainer
  trainer = CooCoo::Trainer.from_name(options.trainer)
  t_opts, trainer_options = trainer.options
  argv = t_opts.parse!(argv)
end

unless argv.empty?
  raise ArgumentError.new("Unknown arguments: #{argv.inspect}")
end

puts("Net ready:")
puts("\tAge: #{net.age}")
puts("\tActivation: #{net.activation_function}")
puts("\tInputs: #{net.num_inputs}")
puts("\tOutputs: #{net.num_outputs}")
puts("\tLayers: #{net.num_layers}")
net.layers.each_with_index do |l, i|
  puts("\t\t#{i}\t#{l.num_inputs}\t#{l.size}\t#{l.class}")
end

$stdout.flush

if options.trainer
  num_batches = options.epochs.to_i * training_set.size / trainer_options.batch_size
  
  puts("Training #{num_batches} batches of #{trainer_options.batch_size} examples for #{options.epochs} epochs at a rate of #{trainer_options.learning_rate} with #{trainer.name}.")

  bar = CooCoo::ProgressBar.create(:total => num_batches)
  
  trainer.train({ network: net,
                  data: training_set.each.cycle(options.epochs)
                }.merge(trainer_options.to_h)) do |stats|
    avg_err = stats.average_loss
    raise "Cost went to NAN" if avg_err.nan?
    status = []
    status << "Cost\t#{avg_err.average}"
    status << "Batch #{stats.batch} took #{stats.total_time} seconds"
    if options.model_path
      if options.binary_blob
        File.write_to(options.model_path) do |f|
          f.write(Marshal.dump(net))
        end
      else
        net.save(options.model_path)
      end
      status << "Saved network to #{options.model_path}"
    end
    bar.log(status.join("\n"))
    bar.increment
  end
end

if options.num_tests
  puts("Running #{options.num_tests} tests starting from #{options.start_tests_at}:")
  e = training_set.each
  e = e.drop(options.start_tests_at) if options.start_tests_at > 0
  e.first(options.num_tests).
    each_with_index do |(target, pixels), i|
    out, hs = net.predict(pixels)
    loss = options.cost_function.call(target, out)
    target_max = target.each.with_index.max
    puts("#{options.start_tests_at + i}\t#{loss.average}\t#{target_max}\t#{out[target_max[1]]}\t#{out.each.with_index.max}\t#{target}\t#{out}")
    $stdout.flush
    GC.start
  end
end
